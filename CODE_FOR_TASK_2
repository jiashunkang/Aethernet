package main

import (
	"bufio"
	"fmt"
	"os"

	"github.com/xthexder/go-jack"
)

const (
	PLAYBACK_WAVE_FILE = "./Sample.wav"
)

// Store 10 seconds microphone input data
var (
	data []jack.AudioSample
)

func process(nframes uint32) int {
	inBuffer := inPort.GetBuffer(nframes)
	outBuffer := outPort.GetBuffer(nframes)
	for _, sample := range inBuffer {
		inputChannel <- sample
	}
	for i := range outBuffer {
		select {
		case sample := <-outputChannel:
			outBuffer[i] = sample
		default:
			outBuffer[i] = 0.0
		}
	}

	return 0
}

func main() {
	client, _ := jack.ClientOpen("AcousticLink", jack.NoStartServer)
	if client == nil {
		fmt.Println("Could not connect to jack server.")
		return
	}
	defer client.Close()

	inPort := client.PortRegister("input", jack.DEFAULT_AUDIO_TYPE, jack.PortIsInput, 0)
	outPort := client.PortRegister("output", jack.DEFAULT_AUDIO_TYPE, jack.PortIsOutput, 0)

	systemInPort := client.GetPortByName("system:capture_1")
	systemOutPort := client.GetPortByName("system:playback_1")

	inputChannel := make(chan jack.AudioSample, 1024)
	outputChannel := make(chan jack.AudioSample, 1024)

	if code := client.SetProcessCallback(process); code != 0 {
		fmt.Println("Failed to set process callback.")
		return
	}

	if code := client.Activate(); code != 0 {
		fmt.Println("Failed to activate client.")
		return
	}
	client.ConnectPorts(systemInPort, inPort)
	client.ConnectPorts(outPort, systemOutPort)
	fmt.Println("Press enter or return to quit...")
	bufio.NewReader(os.Stdin).ReadString('\n')
}
