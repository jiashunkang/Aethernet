package main

import (
	"bufio"
	"fmt"
	"math"
	"os"

	"github.com/xthexder/go-jack"
)

const (
	PLAYBACK_WAVE_FILE = "./Sample.wav"
)

// Store 10 seconds microphone input data
var (
	data []jack.AudioSample
)

func main() {
	var counter int = 0
	client, _ := jack.ClientOpen("AcousticLink", jack.NoStartServer)
	if client == nil {
		fmt.Println("Could not connect to jack server.")
		return
	}
	defer client.Close()

	inPort := client.PortRegister("input", jack.DEFAULT_AUDIO_TYPE, jack.PortIsInput, 0)
	outPort := client.PortRegister("output", jack.DEFAULT_AUDIO_TYPE, jack.PortIsOutput, 0)

	systemInPort := client.GetPortByName("system:capture_1")
	systemOutPort := client.GetPortByName("system:playback_1")

	process := func(nframes uint32) int {
		outBuffer := outPort.GetBuffer(nframes)

		for i := range outBuffer {
			counter++
			outBuffer[i] = jack.AudioSample(math.Sin(float64(counter)*2*math.Pi*1000/48000)/6) + jack.AudioSample(math.Sin(float64(counter)*2*math.Pi*10000/48000)/6)
		}

		return 0
	}

	if code := client.SetProcessCallback(process); code != 0 {
		fmt.Println("Failed to set process callback.")
		return
	}

	if code := client.Activate(); code != 0 {
		fmt.Println("Failed to activate client.")
		return
	}

	client.ConnectPorts(systemInPort, inPort)
	client.ConnectPorts(outPort, systemOutPort)

	fmt.Println("Press enter or return to quit...")
	bufio.NewReader(os.Stdin).ReadString('\n')
}
