package main

import (
	"bufio"
	"fmt"
	"os"
	"time"

	"github.com/xthexder/go-jack"
)

// Store 10 seconds microphone input data
var (
	data []jack.AudioSample
)

func inputThread(doneChan chan bool, inputChannel chan jack.AudioSample) {
	start := time.Now()
	for time.Since(start) < 10*time.Second {
		select {
		case input := <-inputChannel:
			data = append(data, input)
		default:
		}
	}
	doneChan <- true
	for {
		<-inputChannel
	}
}

func playbackThread(doneChan chan bool, outputChannel chan jack.AudioSample) {
	<-doneChan
	fmt.Println("Playback:")
	fmt.Println(len(data))
	for _, d := range data {
		outputChannel <- d
	}
	close(outputChannel)
	fmt.Println("Playback finished.")
}

func main() {
	client, _ := jack.ClientOpen("AcousticLink", jack.NoStartServer)
	if client == nil {
		fmt.Println("Could not connect to jack server.")
		return
	}
	defer client.Close()

	inPort := client.PortRegister("input", jack.DEFAULT_AUDIO_TYPE, jack.PortIsInput, 0)
	outPort := client.PortRegister("output", jack.DEFAULT_AUDIO_TYPE, jack.PortIsOutput, 0)

	systemInPort := client.GetPortByName("system:capture_1")
	systemOutPort := client.GetPortByName("system:playback_1")

	inputChannel := make(chan jack.AudioSample, 1024)
	outputChannel := make(chan jack.AudioSample, 1024)

	process := func(nframes uint32) int {
		inBuffer := inPort.GetBuffer(nframes)
		outBuffer := outPort.GetBuffer(nframes)

		for _, sample := range inBuffer {
			select {
			case inputChannel <- sample:
			default:
			}
		}

		for i := range outBuffer {
			select {
			case sample := <-outputChannel:
				outBuffer[i] = sample
			default:
				outBuffer[i] = 0.0
			}
		}

		return 0
	}
	if code := client.SetProcessCallback(process); code != 0 {
		fmt.Println("Failed to set process callback.")
		return
	}

	if code := client.Activate(); code != 0 {
		fmt.Println("Failed to activate client.")
		return
	}

	client.ConnectPorts(systemInPort, inPort)
	client.ConnectPorts(outPort, systemOutPort)

	// Start two threads to receive input and playback data
	doneChan := make(chan bool)
	go inputThread(doneChan, inputChannel)
	go playbackThread(doneChan, outputChannel)

	fmt.Println("Press enter to quit...")
	bufio.NewReader(os.Stdin).ReadString('\n')
}
